---
#----------------------------------------------------------
# Loadshedding
#----------------------------------------------------------
- platform: template
  sensors:
    current_loadshedding_start_time:
      friendly_name: Current Loadshedding Start Time
      value_template: "{{ as_timestamp(states.calendar.loadshedding_local_schedule.attributes.start_time) | timestamp_custom('%H:%M') }}"
      icon_template: "mdi:clock-remove"

    current_loadshedding_end_time:
      friendly_name: Current Loadshedding End Time
      value_template: "{{ as_timestamp(states.calendar.loadshedding_local_schedule.attributes.end_time) | timestamp_custom('%H:%M') }}"
      icon_template: "mdi:clock-remove"

    next_loadshedding_scheduled_time:
      friendly_name: Current Loadshedding schedule is set from
      value_template: "{{ as_timestamp(states.calendar.loadshedding_local_schedule.attributes.start_time) | timestamp_custom('%H:%M') }} to {{ as_timestamp(states.calendar.loadshedding_local_schedule.attributes.end_time) | timestamp_custom('%H:%M') }}"
      icon_template: "mdi:clock-remove"

    next_loadshedding_start_time_raw:
      friendly_name: Next Loadshedding Start Time Raw
      value_template: "{{  as_timestamp(states.calendar.loadshedding_local_schedule.attributes.start_time) | timestamp_custom('%R') }}"
      icon_template: "mdi:clock-remove"

    next_loadshedding_end_time_raw:
      friendly_name: Next Loadshedding End Time Raw
      value_template: "{{  as_timestamp(states.calendar.loadshedding_local_schedule.attributes.end_time) | timestamp_custom('%R') }}"
      icon_template: "mdi:clock-remove"

#----------------------------------------------------------
# Sensors for Tuya devices
#----------------------------------------------------------
# Tuya 3D Printer Plug
- platform: template
  sensors:
    tuya_3d_printer_plug_power:
      unique_id: "tuya_3d_printer_plug_power"
      friendly_name: "Tuya 3D Printer Plug Power"
      unit_of_measurement: "W"
      value_template: "{{ state_attr('switch.tuya_3d_printer_plug','current_consumption') }}"

    tuya_3d_printer_plug_current:
      unique_id: "tuya_3d_printer_plug_current"
      friendly_name: "Tuya 3D Printer Plug Current"
      unit_of_measurement: "A"
      value_template: "{{ state_attr('switch.tuya_3d_printer_plug','current') }}"

    tuya_3d_printer_plug_voltage:
      unique_id: "tuya_3d_printer_plug_voltage"
      friendly_name: "Tuya 3D Printer Plug Voltage"
      unit_of_measurement: "V"
      value_template: "{{ state_attr('switch.tuya_3d_printer_plug','voltage') }}"

- platform: integration
  source: sensor.tuya_3d_printer_plug_power
  name: 3D Printer Energy
  unit_prefix: k
  method: trapezoidal
  unit_time: h
  round: 2

# Solar Geyser Switch
- platform: template
  sensors:
    solar_geyser_switch_power:
      unique_id: "solar_geyser_switch_power"
      friendly_name: "Solar Geyser Switch Power"
      unit_of_measurement: "W"
      value_template: "{{ state_attr('switch.solar_geyser_switch','current_consumption') }}"

    solar_geyser_switch_current:
      unique_id: "solar_geyser_switch_current"
      friendly_name: "3D Printer Plug Current"
      unit_of_measurement: "A"
      value_template: "{{ state_attr('switch.solar_geyser_switch','current') }}"

    solar_geyser_switch_voltage:
      unique_id: "solar_geyser_switch_voltage"
      friendly_name: "3D Printer Plug Voltage"
      unit_of_measurement: "V"
      value_template: "{{ state_attr('switch.solar_geyser_switch','voltage') }}"

- platform: integration
  source: sensor.solar_geyser_switch_power
  name: Solar Geyser Energy
  unit_prefix: k
  method: trapezoidal
  unit_time: h
  round: 2

#----------------------------------------------------------
# Additional electricity sensors
#----------------------------------------------------------
# PV1 Max power
- platform: daily_min_max
  name: Solar Panels Daily Maximum Output
  type: max
  entity_ids:
    - sensor.sunsynk_pv1_power

# Sunsynk Load Power Daily Maximum
- platform: daily_min_max
  name: Sunsynk Load Power Daily Maximum
  type: max
  entity_ids:
    - sensor.sunsynk_load_power

# Grid usage (sensor.efergy_power_usage - sensor.sunsynk_grid_power)
- platform: template
  sensors:
    grid_non_essential_power:
      friendly_name: "Grid Non Essential Power"
      unit_of_measurement: W
      device_class: power
      unique_id: "grid_non_essential_power"
      value_template: "{{ states('sensor.efergy_power_usage') | float - states('sensor.sunsynk_grid_power') | float }}"

    grid_current:
      friendly_name: "Grid Current"
      unit_of_measurement: A
      device_class: current
      unique_id: "grid_current"
      value_template: "{{ states('sensor.grid_non_essential_power') | float / states('sensor.sunsynk_grid_voltage') | float }}"
