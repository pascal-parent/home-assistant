title: "Home"
path: "home"
cards:
- type: vertical-stack
    cards:
      # ----------------------------------------------------------------------------
      # Electricity
      # ----------------------------------------------------------------------------
      - type: vertical-stack
        in_card: true
        cards:
          - type: "custom:button-card"
            template: custom_card_title
            name: Electricity
            card_mod:
              style: |
                ha-card {
                  margin-top: 15px;
                }

          # ----------------------------------------------------------------------------
          # Charging status
          # ----------------------------------------------------------------------------
          - type: markdown
            content: |
              {% set pv = states('sensor.sunsynk_pv1_power') | float(0) %}
              {% set ep = states('sensor.sunsynk_essential_power') | float(0) %}
              {% set gp = states('sensor.sunsynk_grid_power') | float(0) %}
              {% set bp = states('sensor.sunsynk_battery_power') | float(0) %}
              {% if is_state('input_boolean.sunsynk_house_batteries_charging', 'on') %}
                {% if (gp > 50) %}
                  <ha-alert alert-type="error">Batteries Charging from Grid</ha-alert>
                {% else %}
                  <ha-alert alert-type="success">Batteries Charging from Solar Panels</ha-alert>
                {% endif %}
              {% else %}
                {% if (bp > 100) %}
                  <ha-alert alert-type="warning">House on batteries</ha-alert>
                {% elif (pv > ep) %}
                  {% if (gp > 50) %}
                    <ha-alert alert-type="success">House on Batteries and Solar Panels</ha-alert>
                  {% else %}
                    <ha-alert alert-type="success">House on Solar Panels</ha-alert>
                  {% endif %}
                {% else %}
                  <ha-alert alert-type="error">House on grid</ha-alert>
                {% endif %}
              {% endif %}
            card_mod:
              style: |
                ha-card {
                  margin-top: 10px;
                  margin-bottom: -10px;
                  background: #372A2900;
                }

          # ----------------------------------------------------------------------------
          # Energy
          # ----------------------------------------------------------------------------
          - type: glance
            show_name: false
            entities:
              - entity: sensor.sunsynk_pv1_power
                name: Solar
                icon: mdi:solar-power
                tap_action:
                  action: navigate
                  navigation_path: "electricity"
              - entity: sensor.sunsynk_battery_soc
                name: Charge
                tap_action:
                  action: navigate
                  navigation_path: "electricity"
              - entity: sensor.sunsynk_battery_power
                name: Batteries
                icon: mdi:home-battery-outline
                tap_action:
                  action: navigate
                  navigation_path: "electricity"
              - entity: sensor.sunsynk_essential_power
                name: Essential
                icon: mdi:home-lightning-bolt
                tap_action:
                  action: navigate
                  navigation_path: "electricity"
              - entity: sensor.efergy_power_usage
                name: Grid
                icon: mdi:transmission-tower
                tap_action:
                  action: navigate
                  navigation_path: "electricity"

      - type: vertical-stack
        in_card: true
        cards:
          - type: "custom:button-card"
            template: custom_card_title
            name: Loadshedding 
            card_mod:
              style: |
                ha-card {
                  margin-top: 15px;
                }

          # ----------------------------------------------------------------------------
          # Current loadshedding status
          # ----------------------------------------------------------------------------          
          #- type: markdown
          #  content: |
          #    {% if is_state('binary_sensor.sunsynk_grid_connected', 'off') %}
          #      <ha-alert alert-type="error">Currently Loadshedding until </ha-alert>
          #    {% endif %}
            

          - type: markdown
            content: >-
              {%- set grid_connected = "binary_sensor.sunsynk_grid_connected" -%}
              {%- set stage_sensor = "sensor.load_shedding_stage_eskom" -%}
              {%- set area_sensor = "sensor.load_shedding_area_jhbcitypower3_13_winchesterhills" -%}
              {%- set stage = state_attr(stage_sensor, "stage") -%}
              {%- set next_stage = state_attr(stage_sensor, "next_stage") -%}
              {%- set next_start = state_attr(stage_sensor, "next_start_time") -%}
              {%- set next_end = state_attr(stage_sensor, "next_end_time") -%}
              {%- set alert = states(stage_sensor) -%}
              {%- set alert_type = "success" -%}
              {% set area_forecast = state_attr(area_sensor, "forecast") -%}
              {%- set starts_in = state_attr(area_sensor, "starts_in") -%}
              {%- set ends_in = state_attr(area_sensor, "ends_in") -%}

              {%- if area_forecast -%}
                {%- set next_start = area_forecast[0].start_time -%}
                {%- set next_end = area_forecast[0].end_time -%}
              {%- endif -%}

              {%- if is_state(area_sensor, "off") and starts_in and next_start and next_end -%}
                {%- set next_in = starts_in if starts_in else 0 -%}
                {%- if next_start == 0 or next_end == 0 -%}
                  {%- set next_time = as_timestamp(next_start, default=0.0) -%}
                  {%- set alert = "Stage {stage}".format(stage=next_stage) + " starts in {d}d {h}h {m}m ({next})" -%}
                {%- elif not stage and starts_in > 1440 -%}
                  {%- set next_time = as_timestamp(next_start, default=0.0) -%}
                  {%- set alert = "No Load Shedding" -%}
                {%- else -%}
                  {%- set next_time = as_timestamp(next_start, default=0.0) -%}
                  {%- set alert = "Load Shedding starts in {d}d {h}h {m}m ({next})" -%}
                {%- endif -%}
                {% if next_in > 1440 %}
                  {%- set alert_type = "success" -%}
                {% elif 1440 >= next_in >= 60 %}
                  {%- set alert_type = "warning" -%}
                {% elif 60 > next_in %}
                  {%- set alert_type = "error" -%}
                {% endif %}
              {%- elif is_state(area_sensor, "on") and ends_in -%}
                {%- set next_time = as_timestamp(next_end, default=0.0) -%}
                {%- set next_in = ends_in if ends_in else 0 -%}
                {%- set alert = "Load Shedding ends in {d}d {h}h {m}m ({next})" -%}
                {%- set alert_type = "error" -%}
              {%- endif -%}

              {%- set next_in_sec = timedelta(minutes=next_in).total_seconds() | int(default=0) // 60 -%}
              {%- set mins = next_in_sec % 60 -%}
              {%- set hrs = next_in_sec // 60 % 24 -%}
              {%- set days = next_in_sec // 1440 -%}
              {%- set alert = alert.format(d=days, m=mins, h=hrs, next=next_time | timestamp_custom("%H:%M", True)) -%}

              <ha-alert alert-type="{{ alert_type }}">{{ alert }}</ha-alert>

            card_mod:
              style: |
                ha-card {
                  margin-top: 10px;
                  margin-bottom: -10px;
                  background: #372A2900;
                }

          # ----------------------------------------------------------------------------
          #  Loadshedding Forecast
          # ----------------------------------------------------------------------------      
          - type: custom:html-template-card
            ignore_line_breaks: true
            content: >
              {% set area_sensor = "sensor.load_shedding_area_jhbcitypower3_13_winchesterhills" %}
              {% set number_of_days = 2 %}
              {% set show_day_borders = false %}
              {% set show_end_times = false %}
              {% set timeslots = 48 %}
              <style>
                  @media (prefers-color-scheme: light) {
                      {% if show_day_borders %}
                      .day_container {
                          background-color: #fbeff3 !important;
                      }
                      {% endif %}

                      .current_time_indicator_text,
                      .current_slot_indicator_start_text,
                      .current_slot_indicator_end_text {
                          color: #785551 !important;
                      }

                      .current_time_indicator,
                      .current_slot_indicator_start,
                      .current_slot_indicator_end {
                          background-color: #785551 !important;
                      }

                      .slot {
                          background-color: #f5ddd9 !important;
                      }
                  }

                  .day_container {
                      {% if show_day_borders %}
                      background-color: #2b2120;
                      border-radius: 0.75rem;
                      {% endif %}
                      padding-top: 0.5rem;
                      padding-bottom: 1.75rem;
                      margin: 0.25rem 0;
                  }

                  h3.day_heading,
                  .current_time_indicator_text,
                  .current_slot_indicator_start_text,
                  .current_slot_indicator_end_text {
                      font-family: Roboto, Ubuntu, sans-serif;
                      font-weight: 600;
                  }

                  h3.day_heading {
                      font-size: 1.0rem;
                      margin: 0 0 0 1rem;
                  }

                  .slot_container {
                      display: grid;
                      grid-template-columns: repeat({{ timeslots }}, 1fr);
                      gap: 0.0625rem;
                      width: calc(100% - 2rem);
                      margin: 0 1rem;
                      line-height: 0.9375rem;
                      position: relative;
                  }

                  .slot_container .slot:first-of-type {
                      border-top-left-radius: 50%;
                      border-bottom-left-radius: 50%;
                  }

                  .slot_container .slot:last-of-type {
                      border-top-right-radius: 50%;
                      border-bottom-right-radius: 50%;
                  }

                  .slot {
                      border-radius: 15%;
                      background-color: #534341;
                  }

                  .active_slot_stage_1 {
                      background-color: #f6a829 !important;
                  }

                  .active_slot_stage_2 {
                      background-color: #f8980d !important;
                  }

                  .active_slot_stage_3 {
                      background-color: #e66e0e !important;
                  }

                  .active_slot_stage_4 {
                      background-color: #e3493f !important;
                  }

                  .active_slot_stage_5 {
                      background-color: #d93e3d !important;
                  }

                  .active_slot_stage_6 {
                      background-color: #cf3131 !important;
                  }

                  .active_slot_stage_7 {
                      background-color: #b21e1d !important;
                  }

                  .active_slot_stage_8 {
                      background-color: black !important;
                  }

                  div.active_slot {
                      background-color: black;
                  }

                  div.fade_slot {
                      opacity:0.2;
                  }

                  .current_time_indicator {
                      width: 0.125rem;
                      position: absolute;
                      height: 120%;
                      top: -10%;
                      border-radius: 15%;
                      transform: translate(-50%, 0);
                      background-color: #e6bdb7;
                  }

                  .current_time_indicator_text {
                      position: absolute;
                      bottom: 140%;
                      transform: translate(-50%, 0);
                      color: #e6bdb7;
                  }

                  .current_slot_indicator_start {
                      width: 0.125rem;
                      position: absolute;
                      height: 40%;
                      top: 100%;
                      border-radius: 15%;
                      transform: translate(-50%, 0);
                      background-color: #e6bdb7;
                  }

                  .current_slot_indicator_start_text {
                      position: absolute;
                      top: 150%;
                      transform: translate(-50%, 0);
                      color: #e6bdb7;
                  }

                  .current_slot_indicator_end {
                      width: 0.125rem;
                      position: absolute;
                      height: 40%;
                      bottom: 100%;
                      border-radius: 15%;
                      transform: translate(-50%, 0);
                      background-color: #e6bdb7;
                  }

                  .current_slot_indicator_end_text {
                      position: absolute;
                      bottom: 150%;
                      transform: translate(-50%, 0);
                      color: #e6bdb7;
                  }
              </style>
              {% set area_schedule = state_attr(area_sensor, "forecast") %}
              {% if area_schedule is none %}{% set area_schedule = [] %}{% endif %}
              {% for day_offset_idx in range(number_of_days) %}
                  {% set today_datetime_midnight = now().replace(hour=0,minute=0,second=0,microsecond=0) + timedelta(days=day_offset_idx) %}
                  <div class="day_container">
                      <h3 class="day_heading"
                          style="{% if day_offset_idx == 0 or show_end_times %} margin-bottom: 1.5rem;
                              {% else %} margin-bottom: 0.5rem;
                              {% endif %}">{{ today_datetime_midnight.strftime("%A, %B %-d") }}</h3>
                      <div class="slot_container">
                          {% set ns = namespace(active_class_name="", last_slot_was_active=false, current_slot_was_activated=false) %}
                          {% for half_hour_time_slot_idx in range(timeslots) %}
                              {% set half_hour_time_slot = today_datetime_midnight + timedelta(minutes=30*half_hour_time_slot_idx) %}
                              {% set ns.active_class_name = "" %}
                              {% set ns.current_slot_was_activated = false %}
                              {% for loadshedding in area_schedule %}
                                  {% if not ns.current_slot_was_activated %}
                                      {% if loadshedding["start_time"] <= half_hour_time_slot < loadshedding["end_time"] %}
                                          {% if not ns.last_slot_was_active %}
                                              {% set percentage_of_region = (half_hour_time_slot_idx/timeslots)*100 %}
                                              <span class="current_slot_indicator_start" style="left:{{ percentage_of_region }}%">&nbsp;</span>
                                              <span class="current_slot_indicator_start_text" style="left:{{ percentage_of_region }}%;
                                                          {% if half_hour_time_slot.hour == 0 %}transform: none;{% elif half_hour_time_slot.hour == 23 %}transform: translate(-100%,0);{% endif %}">{{ half_hour_time_slot.strftime("%H:%M") }}</span>
                                          {% endif %}
                                          {% set ns.current_slot_was_activated = true %}
                                          {% set ns.last_slot_was_active = true %}
                                          {% set ns.active_class_name = "active_slot active_slot_" + loadshedding['stage']|lower|replace(' ','_') %}
                                      {% endif %}
                                  {% endif %}
                              {% endfor %}
                              {% if not ns.current_slot_was_activated %}
                                  {% if show_end_times and ns.last_slot_was_active %}
                                      {% set percentage_of_region = (half_hour_time_slot_idx/timeslots)*100 %}
                                      <span class="current_slot_indicator_end"
                                          style="left:{{ percentage_of_region }}%">&nbsp;</span>
                                      <span class="current_slot_indicator_end_text"
                                          style="left:{{ percentage_of_region }}%;
                                                  {% if half_hour_time_slot.hour == 0 %}transform: none;{% elif half_hour_time_slot.hour == 23 %}transform: translate(-100%,0);{% endif %}">{{ half_hour_time_slot.strftime("%H:%M") }}</span>
                                  {% endif %}
                                  {% set ns.last_slot_was_active = false %}
                              {% endif %}
                              <div class="slot {% if now() > half_hour_time_slot + timedelta(minutes=30) %}fade_slot{% endif %} {{ ns.active_class_name }}">&nbsp;</div>
                          {% endfor %}
                          {% if day_offset_idx == 0 %}
                              {% set current_time_indicator_progress = now().hour*2 + now().minute/30 %}
                              {% set percentage_of_region = (current_time_indicator_progress/timeslots)*100 %}
                              <span class="current_time_indicator"
                                  style="left:{{ percentage_of_region }}%">&nbsp;</span>
                              {% if not show_end_times %}
                                <span class="current_time_indicator_text"
                                    style="left:{{ percentage_of_region }}%">Now</span>
                              {% endif %}
                          {% endif %}
                      </div>
                  </div>
              {% endfor %}
